{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"chartspy","text":"<p>\u5e2e\u52a9\u7528\u6237\u5728python\u73af\u5883\u4f7f\u7528echarts g2plot KLineChart \u7ed8\u56fe</p> <p>\u4e0d\u540c\u4e8epyecharts\uff0c\u4e0d\u5bf9echarts \u6982\u5ff5\u548c\u5c5e\u6027\u8fdb\u884cpython\u6620\u5c04\u548c\u4e8c\u6b21\u62bd\u8c61\uff0c\u4fdd\u8bc1\u5e93\u4e0d\u4f9d\u8d56\u4e8e\u7279\u5b9aecharts\u7248\u672c</p> <ul> <li> <p>\u5b9e\u73b0\u4e86 python\u914d\u7f6e&lt;=&gt;JavaScript\u914d\u7f6e\u7684\u53cc\u5411\u4e92\u8f6c</p> </li> <li> <p>\u540c\u65f6\u501f\u9274plotly.express \u5c01\u88c5\u4e86\u7b80\u5355\u56fe\u8868\u7c7b\u578b\u53ef\u89c6\u5316\u51fd\u6570</p> </li> </ul>"},{"location":"#_1","title":"\u4f7f\u7528\u8bf4\u660e","text":""},{"location":"#_2","title":"\u7b80\u5355\u6a21\u5f0f","text":"<p>\u76f4\u63a5\u9009\u62e9\u5408\u9002\u7684\u56fe\u8868\u7c7b\u578b\uff0c\u5c55\u793aDataFrame</p> <pre><code>from chartspy import *\n\nexpress.scatter_echarts(df, x_field='\u6570\u91cf', y_field='\u4ef7\u683c', size_field='\u6570\u91cf', size_max=50, height='250px',\n                        title='scatter')\n\nexpress.pie_echarts(df, name_field='\u6c34\u679c', value_field='\u6570\u91cf', rose_type='area', title=\"pie2\", height='350px')\n\nexpress.candlestick_echarts(df, left_padding='5%', mas=[5, 10, 30], title='\u5e73\u5b89\u94f6\u884c')\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"#_3","title":"\u9ad8\u7ea7\u6a21\u5f0f","text":""},{"location":"#js","title":"\u540cjs\u5199\u6cd5","text":"<p>\u540cjs\u5199\u6cd5\uff0c\u53ea\u662fjs \u51fd\u6570\u8981\u5305\u88f9\u4e0bJs(\"\"\"function(){}\"\"\"),\u5e93\u4f1a\u81ea\u52a8\u8f6c\u6362python\u7c7b\u578b\u5230\u5bf9\u5e94\u7684js\u7c7b\u578b \u624b\u5de5\u4e66\u5199\uff0c\u53c2\u8003 echarts\u914d\u7f6e\u624b\u518c g2plot\u5b98\u65b9\u6587\u6863</p> <pre><code>from chartspy import *\n\n# Echarts\noptions = {\n    'xAxis': {},\n    'yAxis': {},\n    'series': [{\n        'symbolSize': 20,\n        'data': [\n            [10.0, 8.04],\n            [8.07, 6.95],\n            [13.0, 7.58],\n            [9.05, 8.81],\n            [11.0, 8.33]\n        ],\n        'type': 'scatter'\n    }]\n}\nEcharts(options, height='600px').render_notebook()\n</code></pre> <pre><code>from chartspy import *\n\n# G2PLOT\ndf = ...\n# Echarts\noptions = {\n    'xField': 'time',\n    'yField': 'close'\n}\nG2PLOT(df, plot_type='Line', options=options).render_notebook()\n</code></pre> <pre><code>from chartspy import KlineCharts\nimport tushare as ts\n\ndf = ts.pro_bar(ts_code=\"000001.SZ\", adj='qfq')\ndf.rename(columns={'trade_date': 'timestamp', 'vol': 'volume'}, inplace=True)\nKlineCharts(df, main_indicators=['MA', 'SAR'], mas=[5, 10, 30, 60, 120, 250])\n</code></pre>"},{"location":"#javascript-python","title":"\u534a\u81ea\u52a8JavaScript\u914d\u7f6e-&gt;Python\u914d\u7f6e","text":"<p>\u534a\u81ea\u52a8\uff0c\u4eceecharts\u793a\u4f8b \u62f7\u8d1djs\u914d\u7f6e\uff0c\u81ea\u52a8\u751f\u6210\u5bf9\u5e94\u7684python\u914d\u7f6e</p> <p>convert_js_to_dict(js_str,print_dict=True) \u4f1a\u5728\u63a7\u5236\u53f0\u6253\u5370python \u914d\u7f6e, \u65b9\u4fbf\u62f7\u8d1d\u7c98\u8d34\u540e\u8fdb\u884c\u4e8c\u6b21\u52a0\u5de5</p> <pre><code>from chartspy import *\n\njs_str = \"\"\"\n{\n    xAxis: {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    yAxis: {\n        type: 'value'\n    },\n    series: [{\n        data: [820, 932, 901, 934, 1290, 1330, 1320],\n        type: 'line',\n        smooth: true\n    }]\n}\n\"\"\"\noptions = Tools.convert_js_to_dict(js_str, print_dict=False)\nEcharts(options, height='300px', width='300px').render_notebook()\n</code></pre>"},{"location":"pyecharts%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97/","title":"pyecharts\u8fc1\u79fb","text":""},{"location":"pyecharts%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97/#dump_options-js","title":"dump_options \u8f93\u51fajs \u914d\u7f6e","text":"<p>\u4ee5pyecharts\u793a\u4f8b\u56fe\u8868\u4e3e\u4f8b\uff0cdump_options\u8d4b\u503c\u7ed9js_str</p> <pre><code>from pyecharts import options as opts\nfrom pyecharts.charts import Bar\nfrom pyecharts.commons.utils import JsCode\nfrom pyecharts.globals import ThemeType\n\nlist2 = [\n    {\"value\": 12, \"percent\": 12 / (12 + 3)},\n    {\"value\": 23, \"percent\": 23 / (23 + 21)},\n    {\"value\": 33, \"percent\": 33 / (33 + 5)},\n    {\"value\": 3, \"percent\": 3 / (3 + 52)},\n    {\"value\": 33, \"percent\": 33 / (33 + 43)},\n]\n\nlist3 = [\n    {\"value\": 3, \"percent\": 3 / (12 + 3)},\n    {\"value\": 21, \"percent\": 21 / (23 + 21)},\n    {\"value\": 5, \"percent\": 5 / (33 + 5)},\n    {\"value\": 52, \"percent\": 52 / (3 + 52)},\n    {\"value\": 43, \"percent\": 43 / (33 + 43)},\n]\n\njs_str=Bar(init_opts=opts.InitOpts(theme=ThemeType.LIGHT)).add_xaxis([1, 2, 3, 4, 5]).add_yaxis(\"product1\", list2, stack=\"stack1\", category_gap=\"50%\").add_yaxis(\"product2\", list3, stack=\"stack1\", category_gap=\"50%\").set_series_opts(\n        label_opts=opts.LabelOpts(\n            position=\"right\",\n            formatter=JsCode(\n                \"function(x){return Number(x.data.percent * 100).toFixed() + '%';}\"\n            ),\n        )\n    ).dump_options()\n</code></pre>"},{"location":"pyecharts%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97/#js-python-dict","title":"\u4ecejs \u914d\u7f6e \u751f\u6210 python\u914d\u7f6e dict","text":"<p>\u6253\u5370python\u914d\u7f6e</p> <pre><code>from chartspy import *\n\noptions = Tools.convert_js_to_dict(js_str, print_dict=False)\n\nEcharts(options).print_options(drop_data=False)  # \u6253\u5370python dict\u914d\u7f6e\n</code></pre>"},{"location":"pyecharts%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97/#_1","title":"\u590d\u5236 \u7c98\u8d34 \u4fee\u6539","text":"<pre><code>options={\n  \"animation\": True,\n  \"animationThreshold\": 2000,\n  \"animationDuration\": 1000,\n  \"animationEasing\": \"cubicOut\",\n  \"animationDelay\": 0,\n  \"animationDurationUpdate\": 300,\n  \"animationEasingUpdate\": \"cubicOut\",\n  \"animationDelayUpdate\": 0,\n  \"series\": [\n    {\n      \"type\": \"bar\",\n      \"name\": \"product1\",\n      \"legendHoverLink\": True,\n      \"data\": [\n   ......\n}\nEcharts(options) # notebook\u6216\u8005jupyterlab\u5e73\u53f0\u4f1a\u81ea\u52a8\u8f93\u51fa\u56fe\u8868\n</code></pre>"},{"location":"%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/","title":"\u4ee3\u7801\u8bf4\u660e","text":""},{"location":"%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#_2","title":"\u5305\u7ed3\u6784\u8bf4\u660e","text":""},{"location":"%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#chartspy","title":"chartspy\u5305","text":"<p>\u76ee\u524d\u5c01\u88c5echarts\u548cg2plot, KLineChart \u5bf9\u5e943\u4e2a\u5bf9\u8c61</p>"},{"location":"%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#echarts","title":"Echarts","text":"<p>\u53c2\u6570\u8bf4\u660e: <pre><code>\"\"\"\n:param options: python\u8bcd\u5178\u7c7b\u578b\u7684echarts option\n:param extra_js: \u590d\u6742\u56fe\u8868\u9700\u8981\u58f0\u660e\u5b9a\u4e49\u989d\u5916js\u51fd\u6570\u7684\uff0c\u901a\u8fc7\u8fd9\u4e2a\u5b57\u6bb5\u4f20\u9012\n:param width: \u8f93\u51fadiv\u7684\u5bbd\u5ea6 \u652f\u6301\u50cf\u7d20\u548c\u767e\u5206\u6bd4 \u6bd4\u5982800px/100%\n:param height: \u8f93\u51fadiv\u7684\u9ad8\u5ea6 \u652f\u6301\u50cf\u7d20\u548c\u767e\u5206\u6bd4 \u6bd4\u5982800px/100%\n\"\"\"\n</code></pre></p> <p>\u8f93\u51fa:</p> <p>render_notebook() \u8f93\u51fa\u5230notebook</p> <p>render_jupyterlab() \u8f93\u51fa\u5230jupyterlab</p> <p>render_html() \u8f93\u51fa\u5230Html\u5b57\u7b26\u4e32</p> <p>dump_options() \u8f93\u51fa\u5230js\u914d\u7f6e\u5b57\u7b26\u4e32(\u7528\u4e8e\u7c98\u8d34\u5230Html\u4e2d)</p>"},{"location":"%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#g2plot","title":"G2PLOT","text":"<p>\u53c2\u6570\u8bf4\u660e: <pre><code>\"\"\"\n:param df: Dataframe \u6216\u8005list\n:param plot_type: \u5bf9\u5e94g2plot \u56fe\u8868\u7c7b\u578b\n:param options: g2plot\u914d\u7f6e\u6587\u4ef6    \n\"\"\"\n</code></pre></p> <p>\u8f93\u51fa:</p> <p>render_notebook() \u8f93\u51fa\u5230notebook</p> <p>render_jupyterlab() \u8f93\u51fa\u5230jupyterlab</p> <p>render_html() \u8f93\u51fa\u5230Html\u5b57\u7b26\u4e32</p> <p>dump_options() \u8f93\u51fa\u5230js\u914d\u7f6e\u5b57\u7b26\u4e32(\u7528\u4e8e\u7c98\u8d34\u5230Html\u4e2d)</p>"},{"location":"%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#klinechart","title":"KlineChart","text":"<p>\u53c2\u6570\u8bf4\u660e <pre><code>\"\"\"\n:param df: Dataframe  columns=[open,high,low,close,volume,timestamp,turnover]\n:param width: \u5bbd\u5ea6 \u9ed8\u8ba4100%\n:param height: \u9ad8\u5ea6 \u9ed8\u8ba4600px \n\"\"\"\n</code></pre> \u8f93\u51fa:</p> <p>render_notebook() \u8f93\u51fa\u5230notebook</p> <p>render_jupyterlab() \u8f93\u51fa\u5230jupyterlab</p> <p>render_html() \u8f93\u51fa\u5230Html\u5b57\u7b26\u4e32</p>"},{"location":"%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#tools","title":"Tools","text":"<p>Tools\u7684\u9759\u6001\u65b9\u6cd5\u6709\u4e09\u4e2a</p> <ul> <li>convert_js_to_dict JavaScript\u914d\u7f6e\u8f6c\u6362\u6210python\u914d\u7f6e</li> <li>convert_dict_to_js python\u914d\u7f6e\u8f6c\u6362\u6210JavaScript\u914d\u7f6e </li> <li>convert_to_list \u8f85\u52a9\u7528\u6237\u628aDataFrame,Series,ndarray\u8f6c\u6362\u6210list\u7ed3\u6784</li> <li>wrap_template \u662f\u4e00\u4e2a\u6a21\u677f\u5de5\u5177\u51fd\u6570\uff0c\u6784\u5efa\u590d\u6742\u56fe\u8868\u53ef\u80fd\u4f1a\u7528\u5230</li> </ul>"},{"location":"%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#chartspyexpress","title":"chartspy.express\u5305","text":"<p>pandas DataFrame \u6570\u636e\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u4eff\u7167plotly.express</p> <p>\u5305\u542b\u5e38\u7528 bar,scatter,line,pie,candlestick,sankey,parallel,theme_river,heatmap,calendar_heatmap\u7b49\u5e38\u7528\u56fe\u8868</p>"},{"location":"%E5%AE%89%E8%A3%85/","title":"\u5b89\u88c5&amp;\u5347\u7ea7","text":""},{"location":"%E5%AE%89%E8%A3%85/#_2","title":"\u5b89\u88c5","text":"<pre><code>pip install chartspy\n</code></pre>"},{"location":"%E5%AE%89%E8%A3%85/#echartspy","title":"\u5347\u7ea7 echartspy","text":"<pre><code>pip uninstall chartspy -y  &amp;&amp; pip install chartspy\n</code></pre>"},{"location":"%E5%AE%89%E8%A3%85/#echarts","title":"\u4fee\u6539echarts\u7248\u672c","text":"<p>\u9ed8\u8ba4\u6307\u5411\u6700\u65b0\u7248\uff0c\u53ef\u4ee5\u4fee\u6539\u6210\u6307\u5b9a\u7248\u672c <pre><code>from  chartspy import  echarts\nfrom chartspy import g2plot\n\necharts.ECHARTS_JS_URL = \"https://unpkg.com/echarts@latest/dist/echarts.min.js\"\ng2plot.G2PLOT_JS_URL = \"...\"\n</code></pre></p>"},{"location":"%E7%A4%BA%E4%BE%8B/","title":"API\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"%E7%A4%BA%E4%BE%8B/#klinechart","title":"KLineChart \u7ed8\u56fe\u51fd\u6570","text":"<pre><code>from chartspy import KlineCharts\nimport tushare as ts\ndf=ts.pro_bar(ts_code=\"000001.SZ\",adj='qfq')\ndf.rename(columns={'trade_date':'timestamp','vol':'volume'},inplace=True)\nKlineCharts(df, main_indicators=['MA', 'SAR'], mas=[5, 10, 30, 60, 120, 250])\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#chartspyexpress","title":"chartspy.express\u5305\u7ed8\u56fe\u51fd\u6570","text":""},{"location":"%E7%A4%BA%E4%BE%8B/#3d","title":"3D\u6563\u70b9\u56fe","text":"<pre><code>from stocksdk import api\nimport pandas as pd\nimport numpy as np\nimport chartspy.express as ex\nfrom chartspy import Tools, Echarts, G2PLOT, Js\nimport datetime as dt\n\ndf = api.last_info_all()\ndf1 = df[['\u540c\u82b1\u987a1\u7ea7', '\u540c\u82b1\u987a2\u7ea7', '\u540c\u82b1\u987a3\u7ea7', 'name', '\u6d41\u901a\u5e02\u503c']].dropna()\ndf_score = df[['\u76c8\u5229\u80fd\u529b', '\u6210\u957f\u80fd\u529b', '\u8d22\u52a1\u80fd\u529b', 'score', '\u7a33\u5b9a\u80fd\u529b', 'name']].dropna(\n    subset=['\u76c8\u5229\u80fd\u529b', '\u6210\u957f\u80fd\u529b', '\u8d22\u52a1\u80fd\u529b', 'score', '\u7a33\u5b9a\u80fd\u529b'])\nex.scatter3d_echarts(df_score, x_field='\u76c8\u5229\u80fd\u529b', y_field='\u6210\u957f\u80fd\u529b', z_field='\u8d22\u52a1\u80fd\u529b', size_field='score',\n                     color_field='\u7a33\u5b9a\u80fd\u529b',\n                     info='name',\n                     title='scatter3d')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#3d-bar","title":"3D Bar\u56fe","text":"<pre><code>ex.bar3d_echarts(df_score.iloc[0:100], x_field='\u76c8\u5229\u80fd\u529b', y_field='\u6210\u957f\u80fd\u529b', z_field='\u8d22\u52a1\u80fd\u529b', color_field='\u7a33\u5b9a\u80fd\u529b',\n                 info='name',\n                 title='bar3d')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_1","title":"\u65ed\u65e5\u56fe","text":"<pre><code>ex.sunburst_echarts(df1, category_field_list=['\u540c\u82b1\u987a1\u7ea7', '\u540c\u82b1\u987a2\u7ea7', '\u540c\u82b1\u987a3\u7ea7'], value_field='\u6d41\u901a\u5e02\u503c', height='600px')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#treemap","title":"Treemap \u56fe","text":"<pre><code>ex.treemap_g2plot(df1, category_field_list=['\u540c\u82b1\u987a1\u7ea7', '\u540c\u82b1\u987a2\u7ea7', '\u540c\u82b1\u987a3\u7ea7', 'name'], value_field='\u6d41\u901a\u5e02\u503c')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#k","title":"K\u7ebf\u53e0\u52a0","text":"<pre><code>df_price = api.get_price('000001.XSHE', start_time=dt.datetime(2019, 1, 1))\nchart_kline = ex.candlestick_echarts(df_price, log_y=False)\nchart_kline.overlap_series([ex.scatter_echarts(df_price, y_field='close', size_field='volume', color_field='close')])\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_2","title":"\u6563\u70b9\u56fe","text":"<pre><code>ex.scatter_echarts(df_price, y_field='close', size_field='volume', color_field='close', title='scatter')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_3","title":"\u7ebf\u56fe","text":"<pre><code>ex.line_echarts(df_price, y_field='close').overlap_series(\n    [\n        ex.line_echarts(df_price, y_field='open'),\n        ex.line_echarts(df_price, y_field='high'),\n        ex.line_echarts(df_price, y_field='low'),\n    ]\n)\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_4","title":"\u9762\u79ef\u56fe","text":"<pre><code>ex.area_g2plot(df_price.reset_index(),x_field='index',y_field='close')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#bar","title":"Bar\u56fe","text":"<pre><code>ex.bar_echarts(df_price, y_field='close', title='bar')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_5","title":"\u5b50\u5f39\u56fe","text":"<pre><code>ex.bullet_g2plot(title='\u5b50\u5f39\u56fe',range_field=[40,60,80,100],measure_field=[90],target_field=100,height='60px')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_6","title":"\u6d41\u4f53\u56fe","text":"<pre><code>ex.liquid_g2plot(percent=0.6)\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_7","title":"\u70ed\u5ea6\u56fe","text":"<pre><code>ex.calendar_heatmap_echarts(df_price.reset_index().iloc[-200:], date_field='index', value_field='volume',\n                            title='calendar')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_8","title":"\u5e73\u884c\u5750\u6807\u56fe","text":"<pre><code>df_finance = api.filter_table(\"\u8d22\u52a1\u6253\u5206\", code='000002.XSHE')\nex.parallel_echarts(df_finance.iloc[-10:], name_field='statDate', indicator_field_list=['ROA',\n                                                                                          'ROE', '\u9500\u552e\u6bdb\u5229\u7387', '\u6263\u975e\u51c0\u5229\u7387',\n                                                                                          '\u76c8\u5229\u80fd\u529b', '\u6210\u957f\u80fd\u529b', '\u8fd0\u8425\u80fd\u529b',\n                                                                                          '\u8d22\u52a1\u80fd\u529b', '\u7a33\u5b9a\u80fd\u529b', 'score'],\n                    title='\u8d22\u52a1\u4fe1\u606f')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_9","title":"\u96f7\u8fbe\u56fe","text":"<pre><code>ex.radar_echarts(df_finance.iloc[-6:], name_field='statDate', fill=True,\n                 indicator_field_list=['\u76c8\u5229\u80fd\u529b', '\u6210\u957f\u80fd\u529b', '\u8fd0\u8425\u80fd\u529b', '\u8d22\u52a1\u80fd\u529b', '\u7a33\u5b9a\u80fd\u529b', 'score'], title=\"radar\", height='400px')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_10","title":"\u5806\u53e0\u67f1\u72b6\u56fe","text":"<pre><code>df_top10 = api.filter_table(\"\u5341\u5927\u6d41\u901a\u80a1\u4e1c\",code='000002.XSHE')\ndf_top10['\u6301\u80a1\u6bd4\u4f8b']=df_top10['\u6301\u80a1\u6bd4\u4f8b'].round(2)\ndf_other=100-df_top10[['\u62a5\u544a\u671f','\u6301\u80a1\u6bd4\u4f8b']].groupby(\"\u62a5\u544a\u671f\").sum()\ndf_other['\u80a1\u4e1c\u540d\u79f0']=\"\u5176\u4ed6\"\ndf_all= pd.concat([df_top10[['\u62a5\u544a\u671f','\u6301\u80a1\u6bd4\u4f8b','\u80a1\u4e1c\u540d\u79f0']],df_other.reset_index()])\nex.bar_stack_percent_g2plot(df_all,x_field='\u62a5\u544a\u671f',y_field=\"\u6301\u80a1\u6bd4\u4f8b\",series_field='\u80a1\u4e1c\u540d\u79f0',height='600px')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_11","title":"\u7011\u5e03\u56fe","text":"<pre><code>df_waterfall=pd.DataFrame([\n  { 'type': '\u65e5\u7528\u54c1', 'money': 120 },\n  { 'type': '\u4f19\u98df\u8d39', 'money': 900 },\n  { 'type': '\u4ea4\u901a\u8d39', 'money': 200 },\n  { 'type': '\u6c34\u7535\u8d39', 'money': 300 },\n  { 'type': '\u623f\u79df', 'money': 1200 },\n  { 'type': '\u5546\u573a\u6d88\u8d39', 'money': 1000 },\n  { 'type': '\u7ea2\u5305\u6536\u5165', 'money': -2000 },\n])\nex.waterfall_g2plot(df_waterfall,x_field='type',y_field='money')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_12","title":"\u8bcd\u4e91","text":"<pre><code>df_concept= api.get_concept().groupby('category').count()\nex.wordcloud_g2plot(df_concept.reset_index(),word_field='category',weight_field='code')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_13","title":"\u997c\u56fe","text":"<pre><code>ex.pie_echarts(df_concept.reset_index().iloc[-50:], name_field='category', rose_type='none', value_field='code',\n               height='600px', width='100%')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#chord","title":"Chord\u56fe","text":"<pre><code>df_relation=pd.DataFrame(\n[{ 'source': '\u5317\u4eac', 'target': '\u5929\u6d25', 'value': 30 },\n  { 'source': '\u5317\u4eac', 'target': '\u4e0a\u6d77', 'value': 80 },\n  { 'source': '\u5317\u4eac', 'target': '\u6cb3\u5317', 'value': 46 },\n  { 'source': '\u5317\u4eac', 'target': '\u8fbd\u5b81', 'value': 49 },\n  { 'source': '\u5317\u4eac', 'target': '\u9ed1\u9f99\u6c5f', 'value': 69 },\n  { 'source': '\u5317\u4eac', 'target': '\u5409\u6797', 'value': 19 },\n  { 'source': '\u5929\u6d25', 'target': '\u6cb3\u5317', 'value': 62 },\n  { 'source': '\u5929\u6d25', 'target': '\u8fbd\u5b81', 'value': 82 },\n  { 'source': '\u5929\u6d25', 'target': '\u4e0a\u6d77', 'value': 16 },\n  { 'source': '\u4e0a\u6d77', 'target': '\u9ed1\u9f99\u6c5f', 'value': 16 },\n  { 'source': '\u6cb3\u5317', 'target': '\u9ed1\u9f99\u6c5f', 'value': 76 },\n  { 'source': '\u6cb3\u5317', 'target': '\u5185\u8499\u53e4', 'value': 24 },\n  { 'source': '\u5185\u8499\u53e4', 'target': '\u5317\u4eac', 'value': 32 }]\n)\nex.chord_g2plot(df_relation,source_field='source',target_field='target',weight_field='value')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_14","title":"\u4e3b\u9898\u6cb3\u6d41\u56fe","text":"<pre><code>df_blance = api.filter_table('\u8d44\u4ea7\u8d1f\u503a\u8868', code='000002.XSHE')\ndf_cell = df_blance[['code', '\u62a5\u544a\u671f'] + list(df_blance.columns[6:])].melt(id_vars=['code', '\u62a5\u544a\u671f']).dropna(\n    subset=['value'])\ndf_cell = df_cell[\n    (df_cell['value'] &gt; 0) &amp; (df_cell['\u62a5\u544a\u671f'] &gt; dt.datetime(2015, 1, 1)) &amp; (~df_cell['variable'].str.contains(\"\u5408\u8ba1\")) &amp; (\n        ~df_cell['variable'].str.contains(\"\u603b\u8ba1\"))]\ndf_cell['value'] = (df_cell['value'] / 1000000000)\nex.theme_river_echarts(df_cell, date_field='\u62a5\u544a\u671f', value_field='value', theme_field='variable', height='600px')\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#_15","title":"\u56de\u64a4\u56fe","text":"<pre><code>api = StockSDK(multi_thread=True)\ndf = api.get_price('000001')\ndf['code'] = '000001'\ndf1 = api.get_price(\"000002\")\ndf1['code'] = '000002'\ndf2 = pd.concat([df.reset_index(), df1.reset_index()])  # [index,code,close...]\nexpress.drawdown_echarts(df2, time_field='index', code_field='code', price_field='close')  \n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#echarts","title":"Echarts\u5bf9\u8c61\u4f7f\u7528","text":"<p>\u63a5\u53d7python\u914d\u7f6e\uff0c\u8f93\u51fa\u5230\u6307\u5b9a\u5e73\u53f0</p> <pre><code>from chartspy import Echarts, Tools\n\noptions = {\n    'xAxis': {},\n    'yAxis': {},\n    'series': [{\n        'symbolSize': 20,\n        'data': [\n            [10.0, 8.04],\n            [8.07, 6.95],\n            [13.0, 7.58],\n            [9.05, 8.81],\n            [11.0, 8.33]\n        ],\n        'type': 'scatter'\n    }]\n}\nEcharts(options, height='600px', title='\u6563\u70b9\u56fe\u6d4b\u8bd5').render_notebook()\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#tools","title":"Tools\u7c7b\u9759\u6001\u65b9\u6cd5\u4f7f\u7528","text":"<p>\u5de5\u5177\u51fd\u6570\u90fd\u662fTools\u7c7b\u7684\u9759\u6001\u65b9\u6cd5</p>"},{"location":"%E7%A4%BA%E4%BE%8B/#javascriptpython","title":"JavaScript\u914d\u7f6e\u8f6cpython","text":"<pre><code>from chartspy import Echarts, Tools\n\njs_str = \"\"\"\n{\n    title: {\n        text: 'Male and female height and weight distribution',\n        subtext: 'Data from: Heinz 2003'\n    },\n    grid: {\n        left: '3%',\n        right: '7%',\n        bottom: '7%',\n        containLabel: true\n    },\n    tooltip: {\n        // trigger: 'axis',\n        showDelay: 0,\n    ......    \n}\n\"\"\"\noptions = Tools.convert_js_to_dict(js_str, print_dict=False)\nEcharts(options, height='600px').render_notebook()\n</code></pre>"},{"location":"%E7%A4%BA%E4%BE%8B/#dataframeseriesndarraylist","title":"DataFrame/Series/ndarray\u8f6clist","text":"<pre><code>import pandas as pd\nfrom chartspy import Tools\n\ndf = pd.DataFrame(\n    {\n        '\u6c34\u679c': ['\u82f9\u679c', '\u68a8', '\u8349\u8393', '\u9999\u8549'],\n        '\u6570\u91cf': [3, 2, 5, 4],\n        '\u4ef7\u683c': [10, 9, 8, 5],\n        '\u7c7b\u522b': ['\u786c', '\u786c', '\u8f6f', '\u8f6f']\n    })\nlist_data = Tools.convert_to_list(df)\n</code></pre> <p>\u8f93\u51fa:</p> <pre><code>[['\u82f9\u679c', 3, 10, '\u786c'], ['\u68a8', 2, 9, '\u786c'], ['\u8349\u8393', 5, 8, '\u8f6f'], ['\u9999\u8549', 4, 5, '\u8f6f']]\n</code></pre>"},{"location":"en/","title":"chartspy","text":"<p>Help users to use echarts,g2plot,KLineChart drawing in python environment</p> <p>Unlike pyecharts, it does not perform python mapping and secondary abstraction of echarts concepts and attributes, ensuring that the library does not depend on a specific echarts version</p> <ul> <li> <p>implemented two-way conversion of python configuration&lt;=&gt;JavaScript configuration</p> </li> <li> <p>offer simple visualization functions like plotly.express</p> </li> </ul>"},{"location":"en/#instructions-for-use","title":"instructions for use","text":""},{"location":"en/#simple-mode","title":"simple mode","text":"<pre><code>from chartspy import *\n\n......\nexpress.scatter_echarts(df, x_field='\u6570\u91cf', y_field='\u4ef7\u683c', size_field='\u6570\u91cf', size_max=50, height='250px',\n                        title='scatter').render_notebook()\n\nexpress.pie_echarts(df, name_field='\u6c34\u679c', value_field='\u6570\u91cf', rose_type='area', title=\"pie2\",\n                    height='350px').render_notebook()\n\nexpress.candlestick_echarts(df, left_padding='5%', mas=[5, 10, 30], title='\u5e73\u5b89\u94f6\u884c').render_notebook()\n</code></pre>"},{"location":"en/#advanced-mode","title":"advanced mode","text":""},{"location":"en/#handmade","title":"handmade","text":"<p>handmade\uff0creference echarts onfiguration manual</p> <pre><code>from chartspy import *\n\noptions = {\n    'xAxis': {},\n    'yAxis': {},\n    'series': [{\n        'symbolSize': 20,\n        'data': [\n            [10.0, 8.04],\n            [8.07, 6.95],\n            [13.0, 7.58],\n            [9.05, 8.81],\n            [11.0, 8.33]\n        ],\n        'type': 'scatter'\n    }]\n}\nEcharts(options, height='600px', title='\u6563\u70b9\u56fe\u6d4b\u8bd5').render_notebook()\n</code></pre> <pre><code>from chartspy import *\n\n# G2PLOT\ndf = ...\n# Echarts\noptions = {\n    'xField': 'time',\n    'yField': 'close'\n}\nG2PLOT(df, plot_type='Line', options=options).render_notebook()\n</code></pre> <pre><code>from chartspy import KlineCharts\nimport tushare as ts\n\ndf = ts.pro_bar(ts_code=\"000001.SZ\", adj='qfq')\ndf.rename(columns={'trade_date': 'timestamp', 'vol': 'volume'}, inplace=True)\nKlineCharts(df, main_indicators=['MA', 'SAR'], mas=[5, 10, 30, 60, 120, 250])\n</code></pre>"},{"location":"en/#semi-automatic","title":"semi-automatic","text":"<p>from echarts examples copy js configuration ,auto convert to python dict</p> <p>convert_js_to_dict(js_str,print_dict=True) will print python configuration dict in console, manually modify after copy and paste</p> <pre><code>from chartspy import *\n\njs_str = \"\"\"\n{\n    xAxis: {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    yAxis: {\n        type: 'value'\n    },\n    series: [{\n        data: [820, 932, 901, 934, 1290, 1330, 1320],\n        type: 'line',\n        smooth: true\n    }]\n}\n\"\"\"\noptions = Tools.convert_js_to_dict(js_str, print_dict=False)\nEcharts(options, height='300px', width='300px').render_notebook()\n</code></pre>"},{"location":"en/%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/","title":"code description","text":""},{"location":"en/%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#package-structure-description","title":"package structure description","text":""},{"location":"en/%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#chartspy","title":"chartspy","text":""},{"location":"en/%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#echarts","title":"Echarts","text":"<p>parameters: <pre><code>\"\"\"\n:param options: python dict type echarts option\n:param extra_js: complex chart may need extra functions \uff0cuse this parameter\n:param width: output div width  support pixel and percent like 800px/100%\n:param height: output div height  support pixel and percent like 800px/100%\n\"\"\"\n</code></pre></p> <p>output:</p> <p>render_notebook() notebook</p> <p>render_jupyterlab() jupyterlab</p> <p>render_html_fragment()  html fragment(used for copy and past)</p> <p>render_html()  complete html</p> <p>dump_options() print js configuration(used for copy and past)</p>"},{"location":"en/%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#g2plot","title":"G2PLOT","text":"<p>parameters: <pre><code>\"\"\"\n:param df: Dataframe or list\n:param plot_type: g2plot plot type like  Area Column Line \n:param options: g2plot configuration    \n\"\"\"\n</code></pre></p> <p>output:</p> <p>render_notebook() notebook</p> <p>render_jupyterlab() jupyterlab</p> <p>render_html_fragment()  html fragment(used for copy and past)</p> <p>render_html()  complete html</p> <p>dump_options() print js configuration(used for copy and past)</p>"},{"location":"en/%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#klinechart","title":"KlineChart","text":"<p>parameters <pre><code>\"\"\"\n:param df: Dataframe  columns=[open,high,low,close,volume,timestamp,turnover]\n:param width: default 100%\n:param height: default 600px \n\"\"\"\n</code></pre> output:</p> <p>render_notebook() notebook</p> <p>render_jupyterlab() jupyterlab</p> <p>render_html_fragment()  html fragment(used for copy and past)</p> <p>render_html()  complete html</p>"},{"location":"en/%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#tools","title":"Tools","text":"<p>Tools  static methods</p> <ul> <li>convert_js_to_dict JavaScript configuration convert to python dict</li> <li>convert_dict_to_js python dict  convert to JavaScript configuration</li> <li>convert_to_list help user convert DataFrame,Series,ndarray into list</li> <li>wrap_template template function used for generate function </li> </ul>"},{"location":"en/%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/#echartspyexpress","title":"echartspy.express","text":"<p>pandas DataFrame visualization functions\uff0clearn from plotly.express</p> <p>include  bar,scatter,line,pie,candlestick,sankey,parallel,theme_river,heatmap,calendar_heatmap</p>"},{"location":"en/%E5%AE%89%E8%A3%85/","title":"install &amp; upgrade","text":""},{"location":"en/%E5%AE%89%E8%A3%85/#install","title":"install","text":"<pre><code>pip install chartspy\n</code></pre>"},{"location":"en/%E5%AE%89%E8%A3%85/#upgrade-chartspy","title":"upgrade chartspy","text":"<pre><code>pip uninstall chartspy -y  &amp;&amp; pip install chartspy\n</code></pre>"},{"location":"en/%E5%AE%89%E8%A3%85/#change-echarts-version","title":"change echarts version","text":"<pre><code>from  chartspy import  echarts\nfrom chartspy import g2plot\n\necharts.ECHARTS_JS_URL = \"https://unpkg.com/echarts@latest/dist/echarts.min.js\"\ng2plot.G2PLOT_JS_URL = \"...\"\n</code></pre>"},{"location":"en/%E7%A4%BA%E4%BE%8B/","title":"API examples","text":""},{"location":"en/%E7%A4%BA%E4%BE%8B/#klinechart-chart","title":"KLineChart chart","text":"<pre><code>from chartspy import KlineCharts\nimport tushare as ts\ndf=ts.pro_bar(ts_code=\"000001.SZ\",adj='qfq')\ndf.rename(columns={'trade_date':'timestamp','vol':'volume'},inplace=True)\nKlineCharts(df, main_indicators=['MA', 'SAR'], mas=[5, 10, 30, 60, 120, 250])\n</code></pre>"},{"location":"en/%E7%A4%BA%E4%BE%8B/#chartspyexpress","title":"chartspy.express","text":"<pre><code>from stocksdk import api\nimport pandas as pd\nimport numpy as np\nimport chartspy.express as ex\nfrom chartspy import Tools, Echarts, G2PLOT, Js\nimport datetime as dt\n\ndf = api.last_info_all()\ndf1 = df[['\u540c\u82b1\u987a1\u7ea7', '\u540c\u82b1\u987a2\u7ea7', '\u540c\u82b1\u987a3\u7ea7', 'name', '\u6d41\u901a\u5e02\u503c']].dropna()\ndf_score = df[['\u76c8\u5229\u80fd\u529b', '\u6210\u957f\u80fd\u529b', '\u8d22\u52a1\u80fd\u529b', 'score', '\u7a33\u5b9a\u80fd\u529b', 'name']].dropna(\n    subset=['\u76c8\u5229\u80fd\u529b', '\u6210\u957f\u80fd\u529b', '\u8d22\u52a1\u80fd\u529b', 'score', '\u7a33\u5b9a\u80fd\u529b'])\nex.scatter3d_echarts(df_score, x_series='\u76c8\u5229\u80fd\u529b', y_series='\u6210\u957f\u80fd\u529b', z_series='\u8d22\u52a1\u80fd\u529b', size_series='score',\n                     color_series='\u7a33\u5b9a\u80fd\u529b',\n                     info='name',\n                     title='scatter3d')\n</code></pre> <pre><code>ex.bar3d_echarts(df_score.iloc[0:100], x_series='\u76c8\u5229\u80fd\u529b', y_series='\u6210\u957f\u80fd\u529b', z_series='\u8d22\u52a1\u80fd\u529b', color_series='\u7a33\u5b9a\u80fd\u529b',\n                 info='name',\n                 title='bar3d')\n</code></pre> <pre><code>ex.sunburst_echarts(df1, category_series_list=['\u540c\u82b1\u987a1\u7ea7', '\u540c\u82b1\u987a2\u7ea7', '\u540c\u82b1\u987a3\u7ea7'], value_series='\u6d41\u901a\u5e02\u503c', height='600px')\n</code></pre> <pre><code>ex.treemap_g2plot(df1, category_field_list=['\u540c\u82b1\u987a1\u7ea7', '\u540c\u82b1\u987a2\u7ea7', '\u540c\u82b1\u987a3\u7ea7', 'name'], value_field='\u6d41\u901a\u5e02\u503c')\n</code></pre> <pre><code>df_price = api.get_price('000001.XSHE', start_time=dt.datetime(2019, 1, 1))\nchart_kline = ex.candlestick_echarts(df_price, log_y=False)\nchart_kline.overlap_series([ex.scatter_echarts(df_price, y_series='close', size_series='volume', color_series='close')])\n</code></pre> <pre><code>ex.scatter_echarts(df_price, y_series='close', size_series='volume', color_series='close', title='scatter')\n</code></pre> <pre><code>ex.line_echarts(df_price, y_series='close').overlap_series(\n    [\n        ex.line_echarts(df_price, y_field='open'),\n        ex.line_echarts(df_price, y_field='high'),\n        ex.line_echarts(df_price, y_field='low'),\n    ]\n)\n</code></pre> <pre><code>ex.area_g2plot(df_price.reset_index(),x_field='index',y_field='close')\n</code></pre> <pre><code>ex.bar_echarts(df_price, y_series='close', title='bar')\n</code></pre> <pre><code>ex.bullet_g2plot(title='\u5b50\u5f39\u56fe',range_field=[40,60,80,100],measure_field=[90],target_field=100,height='60px')\n</code></pre> <pre><code>ex.liquid_g2plot(percent=0.6)\n</code></pre> <pre><code>ex.calendar_heatmap_echarts(df_price.reset_index().iloc[-200:], date_series='index', value_series='volume',\n                            title='calendar')\n</code></pre> <pre><code>df_finance = api.filter_table(\"\u8d22\u52a1\u6253\u5206\", code='000002.XSHE')\nex.parallel_echarts(df_finance.iloc[-10:], name_series='statDate', indicator_series_list=['ROA',\n                                                                                          'ROE', '\u9500\u552e\u6bdb\u5229\u7387', '\u6263\u975e\u51c0\u5229\u7387',\n                                                                                          '\u76c8\u5229\u80fd\u529b',\n                                                                                          '\u6210\u957f\u80fd\u529b', '\u8fd0\u8425\u80fd\u529b', '\u8d22\u52a1\u80fd\u529b',\n                                                                                          '\u7a33\u5b9a\u80fd\u529b',\n                                                                                          'score'], title='\u8d22\u52a1\u4fe1\u606f')\n</code></pre> <pre><code>ex.radar_echarts(df_finance.iloc[-6:], name_series='statDate', fill=True,\n                 indicator_field_list=['\u76c8\u5229\u80fd\u529b', '\u6210\u957f\u80fd\u529b', '\u8fd0\u8425\u80fd\u529b', '\u8d22\u52a1\u80fd\u529b', '\u7a33\u5b9a\u80fd\u529b', 'score'], title=\"radar\", height='400px')\n</code></pre> <pre><code>df_top10 = api.filter_table(\"\u5341\u5927\u6d41\u901a\u80a1\u4e1c\",code='000002.XSHE')\ndf_top10['\u6301\u80a1\u6bd4\u4f8b']=df_top10['\u6301\u80a1\u6bd4\u4f8b'].round(2)\ndf_other=100-df_top10[['\u62a5\u544a\u671f','\u6301\u80a1\u6bd4\u4f8b']].groupby(\"\u62a5\u544a\u671f\").sum()\ndf_other['\u80a1\u4e1c\u540d\u79f0']=\"\u5176\u4ed6\"\ndf_all= pd.concat([df_top10[['\u62a5\u544a\u671f','\u6301\u80a1\u6bd4\u4f8b','\u80a1\u4e1c\u540d\u79f0']],df_other.reset_index()])\nex.bar_stack_percent_g2plot(df_all,x_field='\u62a5\u544a\u671f',y_field=\"\u6301\u80a1\u6bd4\u4f8b\",series_field='\u80a1\u4e1c\u540d\u79f0',height='600px')\n</code></pre> <pre><code>df_waterfall=pd.DataFrame([\n  { 'type': '\u65e5\u7528\u54c1', 'money': 120 },\n  { 'type': '\u4f19\u98df\u8d39', 'money': 900 },\n  { 'type': '\u4ea4\u901a\u8d39', 'money': 200 },\n  { 'type': '\u6c34\u7535\u8d39', 'money': 300 },\n  { 'type': '\u623f\u79df', 'money': 1200 },\n  { 'type': '\u5546\u573a\u6d88\u8d39', 'money': 1000 },\n  { 'type': '\u7ea2\u5305\u6536\u5165', 'money': -2000 },\n])\nex.waterfall_g2plot(df_waterfall,x_field='type',y_field='money')\n</code></pre> <pre><code>df_concept= api.get_concept().groupby('category').count()\nex.wordcloud_g2plot(df_concept.reset_index(),word_field='category',weight_field='code')\n</code></pre> <pre><code>ex.pie_echarts(df_concept.reset_index().iloc[-50:], name_series='category', rose_type='none', value_series='code',\n               height='600px', width='100%')\n</code></pre> <pre><code>df_relation=pd.DataFrame(\n[{ 'source': '\u5317\u4eac', 'target': '\u5929\u6d25', 'value': 30 },\n  { 'source': '\u5317\u4eac', 'target': '\u4e0a\u6d77', 'value': 80 },\n  { 'source': '\u5317\u4eac', 'target': '\u6cb3\u5317', 'value': 46 },\n  { 'source': '\u5317\u4eac', 'target': '\u8fbd\u5b81', 'value': 49 },\n  { 'source': '\u5317\u4eac', 'target': '\u9ed1\u9f99\u6c5f', 'value': 69 },\n  { 'source': '\u5317\u4eac', 'target': '\u5409\u6797', 'value': 19 },\n  { 'source': '\u5929\u6d25', 'target': '\u6cb3\u5317', 'value': 62 },\n  { 'source': '\u5929\u6d25', 'target': '\u8fbd\u5b81', 'value': 82 },\n  { 'source': '\u5929\u6d25', 'target': '\u4e0a\u6d77', 'value': 16 },\n  { 'source': '\u4e0a\u6d77', 'target': '\u9ed1\u9f99\u6c5f', 'value': 16 },\n  { 'source': '\u6cb3\u5317', 'target': '\u9ed1\u9f99\u6c5f', 'value': 76 },\n  { 'source': '\u6cb3\u5317', 'target': '\u5185\u8499\u53e4', 'value': 24 },\n  { 'source': '\u5185\u8499\u53e4', 'target': '\u5317\u4eac', 'value': 32 }]\n)\nex.chord_g2plot(df_relation,source_field='source',target_field='target',weight_field='value')\n</code></pre> <pre><code>df_blance = api.filter_table('\u8d44\u4ea7\u8d1f\u503a\u8868', code='000002.XSHE')\ndf_cell = df_blance[['code', '\u62a5\u544a\u671f'] + list(df_blance.columns[6:])].melt(id_vars=['code', '\u62a5\u544a\u671f']).dropna(\n    subset=['value'])\ndf_cell = df_cell[\n    (df_cell['value'] &gt; 0) &amp; (df_cell['\u62a5\u544a\u671f'] &gt; dt.datetime(2015, 1, 1)) &amp; (~df_cell['variable'].str.contains(\"\u5408\u8ba1\")) &amp; (\n        ~df_cell['variable'].str.contains(\"\u603b\u8ba1\"))]\ndf_cell['value'] = (df_cell['value'] / 1000000000)\nex.theme_river_echarts(df_cell, date_series='\u62a5\u544a\u671f', value_series='value', theme_series='variable', height='600px')\n</code></pre>"},{"location":"en/%E7%A4%BA%E4%BE%8B/#echarts-object-usage","title":"Echarts object usage","text":"<p>accept python dict configuration\uff0coutput charts</p> <pre><code>from chartspy import Echarts, Tools\n\noptions = {\n    'xAxis': {},\n    'yAxis': {},\n    'series': [{\n        'symbolSize': 20,\n        'data': [\n            [10.0, 8.04],\n            [8.07, 6.95],\n            [13.0, 7.58],\n            [9.05, 8.81],\n            [11.0, 8.33]\n        ],\n        'type': 'scatter'\n    }]\n}\nEcharts(options, height='600px', title='\u6563\u70b9\u56fe\u6d4b\u8bd5').render_notebook()\n</code></pre>"},{"location":"en/%E7%A4%BA%E4%BE%8B/#tools-static-methods","title":"Tools static methods","text":""},{"location":"en/%E7%A4%BA%E4%BE%8B/#javascript-config-to-python-dict","title":"javaScript config to python dict","text":"<pre><code>from chartspy import Echarts, Tools\n\njs_str = \"\"\"\n{\n    title: {\n        text: 'Male and female height and weight distribution',\n        subtext: 'Data from: Heinz 2003'\n    },\n    grid: {\n        left: '3%',\n        right: '7%',\n        bottom: '7%',\n        containLabel: true\n    },\n    tooltip: {\n        // trigger: 'axis',\n        showDelay: 0,\n    ......    \n}\n\"\"\"\noptions = Tools.convert_js_to_dict(js_str, print_dict=False)\nEcharts(options, height='600px').render_notebook()\n</code></pre>"},{"location":"en/%E7%A4%BA%E4%BE%8B/#dataframeseriesndarray-convert-to-list","title":"DataFrame/Series/ndarray convert to list","text":"<pre><code>import pandas as pd\nfrom chartspy import Tools\n\ndf = pd.DataFrame(\n    {\n        '\u6c34\u679c': ['\u82f9\u679c', '\u68a8', '\u8349\u8393', '\u9999\u8549'],\n        '\u6570\u91cf': [3, 2, 5, 4],\n        '\u4ef7\u683c': [10, 9, 8, 5],\n        '\u7c7b\u522b': ['\u786c', '\u786c', '\u8f6f', '\u8f6f']\n    })\nlist_data = Tools.convert_to_list(df)\n</code></pre> <p>output:</p> <pre><code>[['\u82f9\u679c', 3, 10, '\u786c'], ['\u68a8', 2, 9, '\u786c'], ['\u8349\u8393', 5, 8, '\u8f6f'], ['\u9999\u8549', 4, 5, '\u8f6f']]\n</code></pre>"}]}